<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R.SAT-Model</name>
    </assembly>
    <members>
        <member name="T:Rsdn.SmartApp.ActivePartAttribute">
            <summary>
            Помечает active part класс.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ActivePartManagerState">
            <summary>
            <see cref="T:Rsdn.SmartApp.IActivePartManager"/> state.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.ActivePartManagerState.Passivated">
            <summary>
            Manager passivated.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.ActivePartManagerState.Activating">
            <summary>
            Manager in process of activation.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.ActivePartManagerState.Activated">
            <summary>
            Manager activated.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.ActivePartManagerState.Passivating">
            <summary>
            Manager in process of passivation.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.ActivePartManagerState.Invalid">
            <summary>
            Manager in invalid state.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IActivePart">
            <summary>
            Active part interface.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IActivePart.Activate">
            <summary>
            Activate part.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IActivePart.Passivate">
            <summary>
            Passivate part.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IActivePartManager">
            <summary>
            Менеджер active parts.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IActivePartManager.GetPartInstance(System.Type)">
            <summary>
            Получить экземпляр active part.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IActivePartManager.Activate">
            <summary>
            Activate all registered parts.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IActivePartManager.Passivate">
            <summary>
            Passivate all active parts.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.IActivePartManager.State">
            <summary>
            Current state.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ActivePartInfo">
            <summary>
            Описание active part.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ActivePartInfo.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ActivePartInfo.TypeName">
            <summary>
            Тип, реализующий расширение.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsTrue">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsFalse">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsNull">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsNotNull">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.UseKindFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Itself">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as System.Diagnostics.Contracts.PureAttribute".
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.PathReferenceAttribute.BasePath">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcControllerAttribute.AnonymousProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcAreaAttribute.AnonymousProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcActionAttribute.AnonymousProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CmdLineRules">
            <summary>
            Command line rules.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CmdLineRules.#ctor(Rsdn.SmartApp.CommandLine.CommandRule[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CmdLineRules.#ctor(Rsdn.SmartApp.CommandLine.OptionRule[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CmdLineRules.#ctor(Rsdn.SmartApp.CommandLine.CommandRule[],Rsdn.SmartApp.CommandLine.OptionRule[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CmdLineRules.#ctor(Rsdn.SmartApp.CommandLine.CommandQuantifier,Rsdn.SmartApp.CommandLine.CommandRule[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CmdLineRules.#ctor(Rsdn.SmartApp.CommandLine.CommandQuantifier,Rsdn.SmartApp.CommandLine.CommandRule[],Rsdn.SmartApp.CommandLine.OptionRule[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CmdLineRules.CommandQuantifier">
            <summary>
            Command quantifier.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CmdLineRules.Commands">
            <summary>
            Commands.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CmdLineRules.Options">
            <summary>
            Options.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CommandLineCheckException">
            <summary>
            Command line check exception.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CommandLineCheckException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ApplicationException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CommandLineCheckException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ApplicationException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CommandQuantifier">
            <summary>
            Command quantifier.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.CommandQuantifier.ZeroOrOne">
            <summary>
            Single optional command.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.CommandQuantifier.ZeroOrMultiple">
            <summary>
            Any command quantity.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.CommandQuantifier.One">
            <summary>
            One and only one command.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.CommandQuantifier.OneOrMultiple">
            <summary>
            At least one command.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CommandRule">
            <summary>
             Command rule.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CommandRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CommandRule.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CommandRule.Name">
            <summary>
            Command name.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CommandRule.Description">
            <summary>
            Command description.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.OptionRule">
            <summary>
            Option rule.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,Rsdn.SmartApp.CommandLine.OptionType)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,System.String,Rsdn.SmartApp.CommandLine.OptionType)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,Rsdn.SmartApp.CommandLine.OptionType,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,System.String,Rsdn.SmartApp.CommandLine.OptionType,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,Rsdn.SmartApp.CommandLine.OptionType,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.OptionRule.#ctor(System.String,System.String,Rsdn.SmartApp.CommandLine.OptionType,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.OptionRule.Name">
            <summary>
            Option name.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.OptionRule.Description">
            <summary>
            Option description.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.OptionRule.Type">
            <summary>
            Option type.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.OptionRule.Required">
            <summary>
            Option required.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.OptionRule.DependOnCommands">
            <summary>
            List of command names, that option depend on.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CommandLineRulesProviderAttribute">
            <summary>
            Mark command line rules provider.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.CommandLineRulesProviderInfo">
            <summary>
            Information about command line rules provider.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.CommandLineRulesProviderInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.CommandLine.CommandLineRulesProviderInfo.ProviderType">
            <summary>
            Provider type.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.ICommandLineRulesProvider">
            <summary>
            Command line rules provider.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineRulesProvider.GetCommands">
            <summary>
            Returns command rules.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineRulesProvider.GetOptions">
            <summary>
            Returns option rules.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.ICommandLineService">
            <summary>
            Command line service contract.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.GetProgramName">
            <summary>
            Returns file name, that used to execute program.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.GetCommands">
            <summary>
            Return all specified commands.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.IsCommandDefined(System.String)">
            <summary>
            Returns true, if specified command defined.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.GetOptions">
            <summary>
            Return all specified options.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.IsOptionDefined(System.String)">
            <summary>
            Returns true, if specified option defined.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.GetBoolOptionValue(System.String)">
            <summary>
            Return value of bool option.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.CommandLine.ICommandLineService.GetValueOptionValue(System.String)">
            <summary>
            Return value of value option.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.CommandLine.OptionType">
            <summary>
            Type of option node.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.OptionType.Valueless">
            <summary>
            Option without value.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.OptionType.Bool">
            <summary>
            Bool option.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.CommandLine.OptionType.Value">
            <summary>
            Option with value.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.ConfigSectionAttribute">
            <summary>
            Атрибут, поменчающий секцию конфигурации.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.ConfigSectionAttribute.#ctor(System.String,System.String)">
            <summary>
            Инициализирует экземпляр. 
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.ConfigSectionAttribute.CreateSerializer(System.Type)">
            <summary>
            Создать сериалайзер.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionAttribute.Name">
            <summary>
            Имя секции.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionAttribute.Namespace">
            <summary>
            Пространство имен.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionAttribute.AllowMerge">
            <summary>
            Признак допустимости слияния секций.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.ConfigSectionInfo">
            <summary>
            Описание секции конфигурации.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IKeyedElementInfo`1">
            <summary>
            Интерфейс именованного элемента.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.IKeyedElementInfo`1.Key">
            <summary>
            Ключ.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.ConfigSectionInfo.#ctor(System.String,System.String,System.Boolean,System.Type,Rsdn.SmartApp.Configuration.IConfigSectionSerializer)">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.Name">
            <summary>
            Имя секции.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.Namespace">
            <summary>
            XML_пространство имен.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.AllowMerge">
            <summary>
            Разрешено ли слияние секций в разных файлах.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.ContractType">
            <summary>
            Тип контракта секции.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.Serializer">
            <summary>
            Сериализатор.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.Configuration.ConfigSectionInfo.Rsdn#SmartApp#IKeyedElementInfo{System#Type}#Key">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.ConfigXmlConstants">
            <summary>
            Константы, связанные с XML-представлением конфигурации.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.Configuration.ConfigXmlConstants.XmlNamespace">
            <summary>
            XML-неймспейс.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.Configuration.ConfigXmlConstants.XmlSchemaResource">
            <summary>
            Имя ресурса со схемой.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.Configuration.ConfigXmlConstants.IncludeTagName">
            <summary>
            Имя тега с инклюдом.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.Configuration.ConfigXmlConstants.VariableTagName">
            <summary>
            Имя тега с переменной.
            </summary>
        </member>
        <member name="F:Rsdn.SmartApp.Configuration.ConfigXmlConstants.VariableNameAttribute">
            <summary>
            Имя атрибута с именем переменной.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.IConfigDataProvider">
            <summary>
            Поставщик данных с конфигурационной информацией.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.IConfigDataProvider.ReadData">
            <summary>
            Читает данные конфигурации.
            </summary>
            <remarks>Ридер будет уничтожен вызывающим кодом</remarks>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.IConfigDataProvider.ResolveInclude(System.String)">
            <summary>
            Разрешает include.
            </summary>
        </member>
        <member name="E:Rsdn.SmartApp.Configuration.IConfigDataProvider.ConfigChanged">
            <summary>
            Происходит при изменении файла конфигурации внешними средствами.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.IConfigSectionSerializer">
            <summary>
            Сериализатор секции конфигурации.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.IConfigSectionSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Десериализовать секцию.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.IConfigSectionSerializer.CreateDefaultSection">
            <summary>
            Создать секцию по умолчанию.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.Configuration.IConfigService">
            <summary>
            Сервис конфигурации.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.Configuration.IConfigService.GetSection``1">
            <summary>
            Получить содержимое секции.
            </summary>
        </member>
        <member name="E:Rsdn.SmartApp.Configuration.IConfigService.ConfigChanged">
            <summary>
            Вызывается при изменении конфигурации.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.EventHandlerAttribute">
            <summary>
            Атрибут, помечающий обработчик события.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.EventHandlerAttribute.#ctor(System.String)">
            <summary>
            Инициализиурет экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.EventHandlerAttribute.EventName">
            <summary>
            Имя события.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.EventSourceAttribute">
            <summary>
            Атрибут, помечающий источник события.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.EventSourceAttribute.#ctor(System.String)">
            <summary>
            Initialize instance.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.EventSourceAttribute.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IEventBroker">
            <summary>
            Брокер событий.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IEventBroker.Fire``1(System.String,``0)">
            <summary>
            Оповестить подписчиков о событии.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IEventBroker.Subscribe``1(System.String,System.IObserver{``0})">
            <summary>
            Подписаться на событие.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.EventHandler`1">
            <summary>
            Обработчик события без аргументов.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.EventHandler`2">
            <summary>
            Обработчик события с аргументами.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ExtensibilityException">
            <summary>
            Исключение, возбуждаемое в процессе подключения расширений.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensibilityException.#ctor">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensibilityException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр значением сообщения.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensibilityException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр значением сообщения и вложенным исключением.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensibilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор для сериализации.
            Смотри <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ExtensionAttachmentContext">
            <summary>
            Extension attachment context.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensionAttachmentContext.#ctor(System.IServiceProvider,Rsdn.SmartApp.IExtensionManager,System.Reflection.Assembly)">
            <summary>
            Initialize instance by assembly.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensionAttachmentContext.#ctor(System.IServiceProvider,Rsdn.SmartApp.IExtensionManager,System.Reflection.Assembly,System.Type)">
            <summary>
            Initialize instance by type.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionAttachmentContext.ExtensionManager">
            <summary>
            Current extension manager.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionAttachmentContext.Assembly">
            <summary>
            Assembly for assembly level attribute.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionAttachmentContext.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionAttachmentContext.IsAssemblyLevel">
            <summary>
            Returns true, if scan on assembly level.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IExtensionAttachmentStrategy">
            <summary>
            Стратегия подключения расширения.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IExtensionAttachmentStrategy.Attach(Rsdn.SmartApp.ExtensionAttachmentContext,System.Reflection.CustomAttributeData)">
            <summary>
            Attach extension.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IExtensionManager">
            <summary>
            Extension manager contract.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IExtensionManager.Scan(Rsdn.SmartApp.IExtensionAttachmentStrategy,System.Reflection.Assembly[])">
            <summary>
            Scan assembly.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IExtensionManager.Scan(Rsdn.SmartApp.IExtensionAttachmentStrategy,System.Type[])">
            <summary>
            Scan specific type.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ExtensionStrategyFactoryAttribute">
            <summary>
            Атрибут, помечающий реализацию <see cref="T:Rsdn.SmartApp.IExtensionStrategyFactory"/>
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ExtensionStrategyFactoryInfo">
            <summary>
            Информация о зарегистрированной фабрике стратегий.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExtensionStrategyFactoryInfo.#ctor(System.Type)">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionStrategyFactoryInfo.Type">
            <summary>
            Тип фабрики.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExtensionStrategyFactoryInfo.Rsdn#SmartApp#IKeyedElementInfo{System#Type}#Key">
            <summary>
            Ключ.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IExtensionStrategyFactory">
            <summary>
            Интерфейс класса, предоставляющего специфические стратегии.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IExtensionStrategyFactory.CreateStrategies(System.IServiceProvider)">
            <summary>
            Создает стратегии.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.InvalidExtensionTypeException">
            <summary>
            Исключение, возбуждаемое при неверном типе расширения.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InvalidExtensionTypeException.#ctor">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InvalidExtensionTypeException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр значением сообщения.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InvalidExtensionTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр значением сообщения и вложенным исключением.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InvalidExtensionTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор для сериализации.
            Смотри <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IRegElementsService`1">
            <summary>
            Сервис регистрации элементов.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IRegElementsService`1.Register(`0)">
            <summary>
            Зарегистрировать элемент.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IRegElementsService`1.GetRegisteredElements">
            <summary>
            Получить список зарегистрированных элементов.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IRegKeyedElementsService`2">
            <summary>
            Сервис регистрации именованных элементов.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IRegKeyedElementsService`2.ContainsElement(`0)">
            <summary>
            Проверяет, есть ли зарегистрированный элемент с указанным именем.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IRegKeyedElementsService`2.GetElement(`0)">
            <summary>
            Возвращает элемент по его ключу.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.InstancingCustomParam">
            <summary>
            Описатель дополнительных параметров конструктора.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InstancingCustomParam.#ctor(System.String,System.Object)">
            <summary>
            Инициализирует экземпляр опциональным параметром.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.InstancingCustomParam.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.InstancingCustomParam.Name">
            <summary>
            Имя параметра.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.InstancingCustomParam.Value">
            <summary>
            Значение параметра.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.InstancingCustomParam.Optional">
            <summary>
            Опциональный.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.DefaultConstructorAttribute">
            <summary>
            Помечает конструктор по умолчанию, если класс содержит несколько публичных конструкторов.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IServiceDataManager">
            <summary>
            Менеджер персистентных служебных данных.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IServiceDataManager.GetServiceDataInstance``1">
            <summary>
            Получить экземпляр сервисных данных.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IServiceDataManager.ResetCache">
            <summary>
            Сбросить кеш экземпляров.
            </summary>
        </member>
        <member name="E:Rsdn.SmartApp.IServiceDataManager.PropertyChanged">
            <summary>
            Вызывается при изменении свойства в данных.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.PropertyChangedHandler">
            <summary>
            Обработчки события изменеия свойства.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ExpectServiceAttribute">
            <summary>
            Помечает поля, ожидающие сервиса.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ExpectServiceAttribute.#ctor">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="P:Rsdn.SmartApp.ExpectServiceAttribute.Required">
            <summary>
            Признак обязательности наличия сервиса.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IServiceRegistrationCookie">
            <summary>
            Cookie, описывающий опубликованный сервис.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.IServicePublisher">
            <summary>
            Интерфейс сервиса, позволяющего публиковать сервисы.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IServicePublisher.Publish(System.Type,System.Object)">
            <summary>
            Публикует экземпляр сервиса типа Т.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IServicePublisher.Publish(System.Type,Rsdn.SmartApp.ServiceCreator)">
            <summary>
            Публикует сервис типа Т с отложенной инициализацией.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.IServicePublisher.Unpublish(Rsdn.SmartApp.IServiceRegistrationCookie)">
            <summary>
            Убирает публикацию сервиса.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ServiceCreator">
            <summary>
            Делегат, создающий сервис.
            </summary>
        </member>
        <member name="T:Rsdn.SmartApp.ServiceNotFoundException">
            <summary>
            Выбрасывается при отсутствии требуемого сервиса.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Для сериализации.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ServiceNotFoundException.#ctor">
            <summary>
            Инициализирует экземпляр.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ServiceNotFoundException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр с указанием сообщения.
            </summary>
        </member>
        <member name="M:Rsdn.SmartApp.ServiceNotFoundException.#ctor(System.Type)">
            <summary>
            Инициализирует экземпляр с указанием типа отсутствующего сервиса.
            </summary>
        </member>
    </members>
</doc>
